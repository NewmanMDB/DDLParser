/* C++ code produced by gperf version 3.0.3 */
/* Command-line: gperf -c -C -l -L C++ -t -7 -m 100 -I --output-file=Tokens.inc Tokens.gperf  */
/* Computed positions: -k'1,3,5' */

#if !((' ' == 32) && ('!' == 33) && ('"' == 34) && ('#' == 35) \
      && ('%' == 37) && ('&' == 38) && ('\'' == 39) && ('(' == 40) \
      && (')' == 41) && ('*' == 42) && ('+' == 43) && (',' == 44) \
      && ('-' == 45) && ('.' == 46) && ('/' == 47) && ('0' == 48) \
      && ('1' == 49) && ('2' == 50) && ('3' == 51) && ('4' == 52) \
      && ('5' == 53) && ('6' == 54) && ('7' == 55) && ('8' == 56) \
      && ('9' == 57) && (':' == 58) && (';' == 59) && ('<' == 60) \
      && ('=' == 61) && ('>' == 62) && ('?' == 63) && ('A' == 65) \
      && ('B' == 66) && ('C' == 67) && ('D' == 68) && ('E' == 69) \
      && ('F' == 70) && ('G' == 71) && ('H' == 72) && ('I' == 73) \
      && ('J' == 74) && ('K' == 75) && ('L' == 76) && ('M' == 77) \
      && ('N' == 78) && ('O' == 79) && ('P' == 80) && ('Q' == 81) \
      && ('R' == 82) && ('S' == 83) && ('T' == 84) && ('U' == 85) \
      && ('V' == 86) && ('W' == 87) && ('X' == 88) && ('Y' == 89) \
      && ('Z' == 90) && ('[' == 91) && ('\\' == 92) && (']' == 93) \
      && ('^' == 94) && ('_' == 95) && ('a' == 97) && ('b' == 98) \
      && ('c' == 99) && ('d' == 100) && ('e' == 101) && ('f' == 102) \
      && ('g' == 103) && ('h' == 104) && ('i' == 105) && ('j' == 106) \
      && ('k' == 107) && ('l' == 108) && ('m' == 109) && ('n' == 110) \
      && ('o' == 111) && ('p' == 112) && ('q' == 113) && ('r' == 114) \
      && ('s' == 115) && ('t' == 116) && ('u' == 117) && ('v' == 118) \
      && ('w' == 119) && ('x' == 120) && ('y' == 121) && ('z' == 122) \
      && ('{' == 123) && ('|' == 124) && ('}' == 125) && ('~' == 126))
/* The character set is not based on ISO-646.  */
#error "gperf generated tables don't work with this execution character set. Please report a bug to <bug-gnu-gperf@gnu.org>."
#endif

#line 1 "Tokens.gperf"
struct Keyword { const char* name; TokenID m_Token; };
//;
#include <string.h>

#define TOTAL_KEYWORDS 51
#define MIN_WORD_LENGTH 1
#define MAX_WORD_LENGTH 11
#define MIN_HASH_VALUE 1
#define MAX_HASH_VALUE 51
/* maximum key range = 51, duplicates = 0 */

class Perfect_Hash
{
private:
  static inline unsigned int hash (const char *str, unsigned int len);
public:
  static const struct Keyword *in_word_set (const char *str, unsigned int len);
};

inline unsigned int
Perfect_Hash::hash (register const char *str, register unsigned int len)
{
  static const unsigned char asso_values[] =
    {
      52, 52, 52, 52, 52, 52, 52, 52, 52, 52,
      52, 52, 52, 52, 52, 52, 52, 52, 52, 52,
      52, 52, 52, 52, 52, 52, 52, 52, 52, 52,
      52, 52, 52, 52, 52, 52, 52, 52, 52, 52,
      52, 52, 52, 52, 52, 52, 52, 52, 52, 35,
       5, 34,  3, 52, 11, 52, 33, 52, 52, 52,
      52, 52, 52, 52, 52, 52, 52, 52, 52, 52,
      52, 52, 52, 52, 52, 52, 52, 52, 52, 52,
      52, 52, 52, 52, 52, 52, 52, 52, 52, 52,
      52, 52, 52, 52, 52, 40, 52,  8, 14, 10,
      14,  0,  4, 38, 52,  1,  7, 26,  8, 52,
       8, 28, 22, 52,  6, 14,  0,  0, 16, 52,
      52,  4, 52, 52, 52, 52, 52, 52
    };
  register int hval = len;

  switch (hval)
    {
      default:
        hval += asso_values[(unsigned char)str[4]];
      /*FALLTHROUGH*/
      case 4:
      case 3:
        hval += asso_values[(unsigned char)str[2]];
      /*FALLTHROUGH*/
      case 2:
      case 1:
        hval += asso_values[(unsigned char)str[0]];
        break;
    }
  return hval;
}

const struct Keyword *
Perfect_Hash::in_word_set (register const char *str, register unsigned int len)
{
  static const unsigned char lengthtable[] =
    {
       0,  1,  2,  2,  4,  4,  3,  3,  3,  3,  3,  7,  3,  7,
       3,  3,  4,  5, 10,  7,  5,  7,  8,  8,  2,  7, 10,  8,
       6,  5,  7,  5,  4,  3,  6,  5,  6,  5,  6,  4,  8,  3,
       6,  7,  8, 11,  4,  6,  7,  7,  8,  8
    };
  static const struct Keyword wordlist[] =
    {
      {""},
#line 12 "Tokens.gperf"
      {"e",           tE},
#line 28 "Tokens.gperf"
      {"u8",          tUint8},
#line 20 "Tokens.gperf"
      {"i8",          tInt8},
#line 14 "Tokens.gperf"
      {"true",        tTrue},
#line 40 "Tokens.gperf"
      {"tuid",        tTuid},
#line 34 "Tokens.gperf"
      {"u64",         tUint64},
#line 26 "Tokens.gperf"
      {"i64",         tInt64},
#line 32 "Tokens.gperf"
      {"u32",         tUint32},
#line 24 "Tokens.gperf"
      {"i32",         tInt32},
#line 18 "Tokens.gperf"
      {"f64",         tFloat64},
#line 27 "Tokens.gperf"
      {"int64_t",     tInt64},
#line 16 "Tokens.gperf"
      {"f32",         tFloat32},
#line 25 "Tokens.gperf"
      {"int32_t",     tInt32},
#line 30 "Tokens.gperf"
      {"u16",         tUint16},
#line 22 "Tokens.gperf"
      {"i16",         tInt16},
#line 39 "Tokens.gperf"
      {"file",        tFile},
#line 15 "Tokens.gperf"
      {"false",       tFalse},
#line 42 "Tokens.gperf"
      {"extensions",  tExtensions},
#line 23 "Tokens.gperf"
      {"int16_t",     tInt16},
#line 52 "Tokens.gperf"
      {"units",       tUnits},
#line 46 "Tokens.gperf"
      {"uirange",     tUIRange},
#line 47 "Tokens.gperf"
      {"uirender",    tUIRender},
#line 9 "Tokens.gperf"
      {"bitfield",    tBitfield},
#line 13 "Tokens.gperf"
      {"pi",          tPi},
#line 11 "Tokens.gperf"
      {"default",     tDefault},
#line 43 "Tokens.gperf"
      {"vaulthints",  tVaultHints},
#line 35 "Tokens.gperf"
      {"uint64_t",    tUint64},
#line 19 "Tokens.gperf"
      {"double",      tFloat64},
#line 6 "Tokens.gperf"
      {"value",       tValue},
#line 49 "Tokens.gperf"
      {"version",     tVersion},
#line 44 "Tokens.gperf"
      {"empty",       tEmpty},
#line 45 "Tokens.gperf"
      {"base",        tBase},
#line 51 "Tokens.gperf"
      {"key",         tKey},
#line 36 "Tokens.gperf"
      {"string",      tString},
#line 7 "Tokens.gperf"
      {"label",       tLabel},
#line 8 "Tokens.gperf"
      {"struct",      tStruct},
#line 17 "Tokens.gperf"
      {"float",       tFloat32},
#line 10 "Tokens.gperf"
      {"select",      tSelect},
#line 41 "Tokens.gperf"
      {"json",        tJson},
#line 50 "Tokens.gperf"
      {"callback",    tCallback},
#line 53 "Tokens.gperf"
      {"tag",         tTag},
#line 4 "Tokens.gperf"
      {"author",      tAuthor},
#line 54 "Tokens.gperf"
      {"typedef",     tTypedef},
#line 48 "Tokens.gperf"
      {"parallel",    tParallel},
#line 5 "Tokens.gperf"
      {"description", tDescription},
#line 37 "Tokens.gperf"
      {"bool",        tBoolean},
#line 21 "Tokens.gperf"
      {"int8_t",      tInt8},
#line 29 "Tokens.gperf"
      {"uint8_t",     tUint8},
#line 38 "Tokens.gperf"
      {"boolean",     tBoolean},
#line 33 "Tokens.gperf"
      {"uint32_t",    tUint32},
#line 31 "Tokens.gperf"
      {"uint16_t",    tUint16}
    };

  if (len <= MAX_WORD_LENGTH && len >= MIN_WORD_LENGTH)
    {
      register int key = hash (str, len);

      if (key <= MAX_HASH_VALUE && key >= 0)
        if (len == lengthtable[key])
          {
            register const char *s = wordlist[key].name;

            if (*str == *s && !memcmp (str + 1, s + 1, len - 1))
              return &wordlist[key];
          }
    }
  return 0;
}
