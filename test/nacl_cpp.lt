/*!
--  ######  ######## ##       ########  ######  ########
-- ##    ## ##       ##       ##       ##    ##    ##
-- ##       ##       ##       ##       ##          ##
--  ######  ######   ##       ######   ##          ##
--       ## ##       ##       ##       ##          ##
-- ##    ## ##       ##       ##       ##    ##    ##
--  ######  ######## ######## ########  ######     ##

local function generateSelect( select )
  */
  ///*= ( '=' ):rep( 80 ) */
  // Select /*= select:getName() */
  ///*= ( '=' ):rep( 80 ) */

  bool /*= select:getName() */::IsValid( uint32_t value )
  {
    switch ( value ) // Check for a valid value.
    {
      /*! for _, item in select:items() do */
        case k/*= capitalize( item:getName() ) */:
      /*! end */
      return true;
    }
    
    return false;
  }

  bool /*= select:getName() */::Set( uint32_t value )
  {
    if ( IsValid( value ) )
    {
      m_Value = value;
      return true;
    }
    
    return false;
  }

  bool /*= select:getName() */::WriteJson( JsonWriteScope* parent_scope, const char* name )
  {
    switch ( m_Value ) // Check for a valid value.
    {
      /*! for _, item in select:items() do */
        case k/*= capitalize( item:getName() ) */:
          parent_scope->WriteString( "k/*= capitalize( item:getName() ) */", name );
          return true;
      /*! end */
    }
    
    return false;
  }
  /*!
end

-- ########  #### ######## ######## #### ######## ##       ########
-- ##     ##  ##     ##    ##        ##  ##       ##       ##     ##
-- ##     ##  ##     ##    ##        ##  ##       ##       ##     ##
-- ########   ##     ##    ######    ##  ######   ##       ##     ##
-- ##     ##  ##     ##    ##        ##  ##       ##       ##     ##
-- ##     ##  ##     ##    ##        ##  ##       ##       ##     ##
-- ########  ####    ##    ##       #### ######## ######## ########

local function generateBitfield( bitfield )
  */
  ///*= ( '=' ):rep( 80 ) */
  // Bitfield /*= bitfield:getName() */
  ///*= ( '=' ):rep( 80 ) */
  
  bool /*= bitfield:getName() */::IsValid( uint32_t value )
  {
    static const uint32_t all_flags =
    /*!
    local first = true
    for _, flag in bitfield:flags() do
      local value = flag:getValue()
      
      if type( value ) ~= 'table' and value ~= 0 then
        if not first then
          */ | /*!
        end
        first = false
        */ k/*= capitalize( flag:getName() ) */ /*!
      end
    end
    */ ;
    
    return ( value & all_flags ) == value;
  }

  bool /*= bitfield:getName() */::Set( uint32_t value )
  {
    if ( IsValid( value ) )
    {
      m_Value = value;
      return true;
    }
    
    return false;
  }

  bool /*= bitfield:getName() */::Add( uint32_t value )
  {
    if ( IsValid( value ) )
    {
      m_Value |= value;
      return true;
    }
    
    return false;
  }

  bool /*= bitfield:getName() */::Remove( uint32_t value )
  {
    if ( IsValid( value ) )
    {
      m_Value &= ~value;
      return true;
    }
    
    return false;
  }

  bool /*= bitfield:getName() */::WriteJson( JsonWriteScope* parent_scope, const char* name )
  {
    parent_scope->WriteUInt( m_Value, name );
    return true;
  }
  /*!
end

--  ######  ######## ########  ##     ##  ######  ########
-- ##    ##    ##    ##     ## ##     ## ##    ##    ##
-- ##          ##    ##     ## ##     ## ##          ##
--  ######     ##    ########  ##     ## ##          ##
--       ##    ##    ##   ##   ##     ## ##          ##
-- ##    ##    ##    ##    ##  ##     ## ##    ##    ##
--  ######     ##    ##     ##  #######   ######     ##

local function generateStruct( struct )
*/
  ///*= ( '=' ):rep( 80 ) */
  // Struct /*= struct:getName() */
  ///*= ( '=' ):rep( 80 ) */
  
  #ifndef NDEBUG
  /*= struct:getName() */::~/*= struct:getName() */()
  {
    /*!
    for _, field in struct:ownFields() do
      local name = capitalize( field:getName() )
      
      if field:getArrayType() == 'scalar' then
        if field:getDeclaredType() then
          -- Destructor automatically called to validate destruction
        elseif field:getType() == 'string' or field:getType() == 'file' or field:getType() == 'json' then
          */
          assert( m_/*= name */.length() == 0 );
          /*!
        end
      elseif field:getArrayType() == 'fixed' then
        if field:getDeclaredType() then
          -- Destructor automatically called to validate destruction
        elseif field:getType() == 'string' or field:getType() == 'file' or field:getType() == 'json' then
          */
          {
            for ( size_t i = 0; i < /*= field:getArrayCount() */; i++ )
            {
              assert( m_/*= name */[ i ].length() == 0 );
            }
          }
          /*!
        end
      elseif field:getArrayType() == 'dynamic' then
        */
        assert( m_/*= name */.size() == 0 );
        /*!
      elseif field:getArrayType() == 'hashmap' then
        */
        assert( m_/*= name */.size() == 0 );
        /*!
      else
        */// Array type "/*= field:getArrayType() */" not supported/*!
      end
    end
    */
  }
  #endif

  bool /*= struct:getName() */::Init()
  {
    bool ok = true;

    /*!
    if struct:getBase() then */ok = ok && /*= struct:getBase() */::Init();/*! end

    for _, field in struct:ownFields() do
      local name = capitalize( field:getName() )
      
      if field:getArrayType() == 'scalar' then
        if field:getDeclaredType() then
          */
          ok = ok && m_/*= name */.Init();
          /*!
          if field:getValue() then
            if field:getType() == 'struct' then
              dumpStructValue( { valueinfo = field } )
            else
              */
              m_/*= name */.Set( /*= getFieldValue( field ) */ );
              /*!
            end
          end
        else
          */
          m_/*= name */ = /*= getFieldValue( field ) */;
          /*!
        end
      elseif field:getArrayType() == 'fixed' then
        if field:getDeclaredType() then
          for index = 0, field:getArrayCount() - 1 do
            */
            ok = ok && m_/*= name */[ /*= index */ ].Init();
            /*!
          end
          
          if field:getValue() then
            if field:getType() == 'struct' then
              dumpStructValue( { valueinfo = field } )
            else
              for index = 0, #field:getValue() - 1 do
                */
                ok = ok && m_/*= name */[ /*= index */ ].Set( /*= index */, /*= getFieldValue( field, index + 1 ) */ );
                /*!
              end
            end
          end
        else
          for index, _ in ipairs( field:getValue() or {} ) do
            */
              m_/*= name */[ /*= index - 1 */ ] = /*= getFieldValue( field, index ) */;
            /*!
          end
        end
      elseif field:getArrayType() == 'dynamic' then
        -- Dynamic arrays don't have default values
      elseif field:getArrayType() == 'hashmap' then
        -- Hashmaps don't have default values
      else
        */// Array type "/*= field:getArrayType() */" not supported/*!
      end
    end
    */

    return ok;
  }

  void /*= struct:getName() */::Destroy()
  {
    /*!
    if struct:getBase() then */ /*= struct:getBase() */::Destroy();/*! end

    for _, field in struct:ownFields() do
      local name = capitalize( field:getName() )
      
      if field:getArrayType() == 'scalar' then
        if field:getDeclaredType() then
          */
          m_/*= name */.Destroy();
          /*!
        elseif field:getType() == 'string' or field:getType() == 'file' or field:getType() == 'json' then
          */
          m_/*= name */.clear();
          /*!
        end
      elseif field:getArrayType() == 'fixed' then
        if field:getDeclaredType() then
          */
          for ( size_t i = 0; i < /*= field:getArrayCount() */; i++ )
          {
            m_/*= name */[ i ].Destroy();
          }
          /*!
        elseif field:getType() == 'string' or field:getType() == 'file' or field:getType() == 'json' then
          */
          for ( size_t i = 0; i < /*= field:getArrayCount() */; i++ )
          {
            m_/*= name */[ i ].clear();
          }
          /*!
        end
      elseif field:getArrayType() == 'dynamic' then
        if field:getDeclaredType() then
          */
          for ( size_t i = 0; i < m_/*= name */.size(); i++ )
          {
            m_/*= name */[ i ].Destroy();
          }
          /*!
        end
        */
        m_/*= name */.clear();
        /*!
      elseif field:getArrayType() == 'hashmap' then
        if field:getDeclaredType() then
          */
          for ( std::map< /*= getCppType( field:getKeyType() ) .. ', ' .. getCppType( field:getType() ) */ >::iterator it = m_/*= name */.begin(); it != m_/*= name */.end(); it++ )
          {
            it->second.Destroy();
          }
          /*!
        end
        */
        m_/*= name */.clear();
        /*!
      else
        */// Array type "/*= field:getArrayType() */" not supported/*!
      end
    end
    */
  }

  bool /*= struct:getName() */::WriteJson( char*& output, size_t& size, const char* name )
  {
    JsonWriteScope  json( output, size );
    return WriteJson( &json, name );
  }
    
  bool /*= struct:getName() */::WriteJson( JsonWriteScope* parent_scope, const char* name )
  {
    bool ok = true;

    JsonWriteScopeObject json( parent_scope, name );

    /*!
    if struct:getBase() then */ok = ok && /*= struct:getBase() */::WriteJson( &json, "/*= struct:getBase():getName() */" );/*! end
    */

    /*!
    for _, field in struct:ownFields() do
      local name = capitalize( field:getName() )
      
      if field:getArrayType() == 'scalar' then
        if field:getDeclaredType() then
          */
          ok = ok && m_/*= name */.WriteJson( &json, "/*= name */" );
          /*!
        elseif field:getType() == 'boolean' then
          */
          json.WriteBool( m_/*= name */, "/*= name */" );
          /*!
        elseif field:getType() == 'string' or field:getType() == 'file' or field:getType() == 'json' then
          */
          json.WriteString( m_/*= name */.c_str(), "/*= name */" );
          /*!
        elseif field:getType() == 'int8' or field:getType() == 'int16' or field:getType() == 'int32' or field:getType() == 'int64' then
          */
          json.WriteInt( m_/*= name */, "/*= name */" );
          /*!
        elseif field:getType() == 'uint8' or field:getType() == 'uint16' or field:getType() == 'uint32' or field:getType() == 'uint64' then
          */
          json.WriteUInt( m_/*= name */, "/*= name */" );
          /*!
        elseif field:getType() == 'tuid' then
          */
          json.WriteUInt( m_/*= name */, "/*= name */" );
          /*!
        elseif field:getType() == 'float32' or field:getType() == 'float64' then
          */
          json.WriteFloat( m_/*= name */, "/*= name */" );
          /*!
        else
          */
          json.WriteString( "m_/*= name */", "unsupported" ); // /*= field:getType() */
          /*!
        end
      end
    end
    */
    return ok;
  }
/*!
end

--  ######   ######## ##    ## ######## ########     ###    ######## ########
-- ##    ##  ##       ###   ## ##       ##     ##   ## ##      ##    ##
-- ##        ##       ####  ## ##       ##     ##  ##   ##     ##    ##
-- ##   #### ######   ## ## ## ######   ########  ##     ##    ##    ######
-- ##    ##  ##       ##  #### ##       ##   ##   #########    ##    ##
-- ##    ##  ##       ##   ### ##       ##    ##  ##     ##    ##    ##
--  ######   ######## ##    ## ######## ##     ## ##     ##    ##    ########

local function generate( ddlc, first_aggregate, settings )
  local ddl = ddlc:getDefinition()

  for _, aggregate in ddl:aggregates() do
    if aggregate:getType() == 'select' then
      generateSelect( aggregate )
    elseif aggregate:getType() == 'bitfield' then
      generateBitfield( aggregate )
    elseif aggregate:getType() == 'struct' then
      generateStruct( aggregate )
    else
      error( 'Don\'t know how to generate code for ' .. aggregate:getType() )
    end
  end
end

-- ##     ##    ###    #### ##    ##
-- ###   ###   ## ##    ##  ###   ##
-- #### ####  ##   ##   ##  ####  ##
-- ## ### ## ##     ##  ##  ## ## ##
-- ##     ## #########  ##  ##  ####
-- ##     ## ##     ##  ##  ##   ###
-- ##     ## ##     ## #### ##    ##

function main( ddlc, first_aggregate, settings )
  if settings[ '--help' ] then
    io.write(
      'CPP template arguments\n',
      '\n',
      '-h --help                      Shows this help page\n',
      '-o --output-file <file>        Defines the output file\n',
      '-I --include <file>...         #includes a file in the generated code\n',
      '\n'
    )
    return
  end

  checkSettings( settings, {
    { short_name = '-o', long_name = '--output-file', min = 1, max = 1 }, -- mandatory
    { short_name = '-I', long_name = '--include', min = 1 }
  } )

  if not settings[ '--output-file' ] then
    error( 'Missing mandatory option --output-file' )
  end

  beginOutput()

  local disclaimer = ddlc:getDisclaimer()
  */
  ///*= ( '=' ):rep( #disclaimer + 1 ) */
  // /*= disclaimer */
  ///*= ( '=' ):rep( #disclaimer + 1 ) */
  /*! for _, include in ipairs( settings[ '--include' ] or {} ) do */
    #include "/*= include */"
  /*! end */
  
  /*!
  generate( ddlc, first_aggregate, settings )

  local code, err = getOutput():formatCode()
  endOutput()

  if not code then
    error( err )
  end

  local file, err = io.open( settings[ '--output-file' ][ 1 ], 'w' )

  if not file then
    error( err )
  end

  file:write( code )
  file:close()
end
*/
