
//=====================================================================
// Do not edit. This file generated by ddlt/ddlt on 21 April 2012 23:49
//=====================================================================

#include "test_ddl.h"


//================================================================================
// Select Weapon
//================================================================================

void Weapon::Set( uint32_t value )
{
  switch ( value ) // Check for a valid value.
  {

  case kFist:

  case kChainsaw:

  case kPistol:

  case kShotgun:

  case kChaingun:

  case kRocketLauncher:

  case kPlasmaGun:

  case kBFG9000:

    m_Value = value;
    break;
  }
}

bool Weapon::Load( FILE* fp )
{
  Init(); // Set to default value in case fread fails or the value is invalid.

  uint32_t value;
  if ( fread( &value, 1, 4, fp ) == 4 )
  {
    Set( value );
    return true; // Load was successful, but value may not be set!
  }

  return false;
}

bool Weapon::Save( FILE* fp )
{
  return fwrite( &m_Value, 1, 4, fp ) == 4;
}

//================================================================================
// Bitfield Powerup
//================================================================================

bool Powerup::Load( FILE* fp )
{
  return fread( &m_Value, 1, 4, fp ) == 4;
}

bool Powerup::Save( FILE* fp )
{
  return fwrite( &m_Value, 1, 4, fp ) == 4;
}

//================================================================================
// Struct Position
//================================================================================

bool Position::Init()
{
  bool ok = true;


  m_x = 0.000000f;

  m_y = 0.000000f;

  m_angle = 0.000000f;


  return ok;
}

bool Position::Load( FILE* fp )
{
  bool ok = true;

  ok = ok && fread( &m_x, 1, 4, fp ) == 4;

  ok = ok && fread( &m_y, 1, 4, fp ) == 4;

  ok = ok && fread( &m_angle, 1, 4, fp ) == 4;


  return ok;
}

bool Position::Save( FILE* fp )
{
  bool ok = true;

  ok = ok && fwrite( &m_x, 1, 4, fp ) == 4;

  ok = ok && fwrite( &m_y, 1, 4, fp ) == 4;

  ok = ok && fwrite( &m_angle, 1, 4, fp ) == 4;


  return ok;
}

//================================================================================
// Struct Mariner
//================================================================================

bool Mariner::Init()
{
  bool ok = true;


  m_health = 100UL;

  ok = ok && m_weapon.Init();

  m_weapon.Set( Weapon::kPistol ); // kPistol

  ok = ok && m_powerup.Init();
  m_powerup.Set( Powerup::kBerserk );
  strncpy( m_name, "Mariner", sizeof( m_name ) );
  m_name[ sizeof( m_name ) - 1 ] = 0;

  ok = ok && m_position.Init();
  m_position.Setx( 100.000000f );
  m_position.Sety( 120.000000f );


  return ok;
}

bool Mariner::Load( FILE* fp )
{
  bool ok = true;

  ok = ok && fread( &m_health, 1, 4, fp ) == 4;

  ok = ok && m_weapon.Load( fp );

  ok = ok && m_powerup.Load( fp );

  {
    uint8_t length;
    ok = ok && fread( &length, 1, 1, fp ) == 1;
    ok = ok && fread( m_name, 1, length, fp ) == length;
  }

  ok = ok && m_position.Load( fp );


  return ok;
}

bool Mariner::Save( FILE* fp )
{
  bool ok = true;

  ok = ok && fwrite( &m_health, 1, 4, fp ) == 4;

  ok = ok && m_weapon.Save( fp );

  ok = ok && m_powerup.Save( fp );

  {
    uint8_t length = strlen( m_name );
    ok = ok && fwrite( &length, 1, 1, fp ) == 1;
    ok = ok && fwrite( m_name, 1, length, fp ) == length;
  }

  ok = ok && m_position.Save( fp );


  return ok;
}
