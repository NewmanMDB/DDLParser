
//=====================================================================
// Do not edit. This file generated by ddlt/ddlt on 22 April 2012 09:02
//=====================================================================

#include "test_nacl_ddl.h"


//================================================================================
// Select Weapon
//================================================================================

void Weapon::Set ( uint32_t value )
{
  switch ( value ) // Check for a valid value.
  {
    case kFist:
    case kChainsaw:
    case kPistol:
    case kShotgun:
    case kChaingun:
    case kRocketLauncher:
    case kPlasmaGun:
    case kBFG9000:
      m_Value = value;
      break;
  }
}

const char* Weapon::GetName ( uint32_t value )
{
  switch ( value ) // Check for a valid value.
  {
    case kFist:
      return "kFist";
      break;
    case kChainsaw:
      return "kChainsaw";
      break;
    case kPistol:
      return "kPistol";
      break;
    case kShotgun:
      return "kShotgun";
      break;
    case kChaingun:
      return "kChaingun";
      break;
    case kRocketLauncher:
      return "kRocketLauncher";
      break;
    case kPlasmaGun:
      return "kPlasmaGun";
      break;
    case kBFG9000:
      return "kBFG9000";
      break;
    default:
      return "unknown";
  }
}

bool Weapon::WriteJson ( JsonWriteScope* parent_scope, const char* name )
{
  parent_scope->WriteString ( GetName ( m_Value ), name );
  return true;
}


//================================================================================
// Bitfield Powerup
//================================================================================

bool Powerup::WriteJson ( JsonWriteScope* parent_scope, const char* name )
{
  parent_scope->WriteUInt ( m_Value, name );
  return true;
}


//================================================================================
// Struct Position
//================================================================================

bool Position::Init()
{
  bool ok = true;
  m_x = 0.000000f;
  m_y = 0.000000f;
  m_angle = 0.000000f;
  return ok;
}

bool Position::WriteJson ( char*& output, size_t& size, const char* name )
{
  JsonWriteScope  json ( output, size );
  return WriteJson ( &json, name );
}

bool Position::WriteJson ( JsonWriteScope* parent_scope, const char* name )
{
  bool ok = true;
  JsonWriteScopeObject json ( parent_scope, name );
  json.WriteFloat ( m_x, "x" );
  json.WriteFloat ( m_y, "y" );
  json.WriteFloat ( m_angle, "angle" );
  return ok;
}

//================================================================================
// Struct Mariner
//================================================================================

bool Mariner::Init()
{
  bool ok = true;
  m_health = 100UL;
  ok = ok && m_weapon.Init();
  m_weapon.Set ( Weapon::kPistol ); // kPistol
  ok = ok && m_powerup.Init();
  m_powerup.Set ( Powerup::kBerserk );
  strncpy ( m_name, "Mariner", sizeof ( m_name ) );
  m_name[ sizeof ( m_name ) - 1 ] = 0;
  ok = ok && m_position.Init();
  m_position.Setx ( 100.000000f );
  m_position.Sety ( 120.000000f );
  return ok;
}

bool Mariner::WriteJson ( char*& output, size_t& size, const char* name )
{
  JsonWriteScope  json ( output, size );
  return WriteJson ( &json, name );
}

bool Mariner::WriteJson ( JsonWriteScope* parent_scope, const char* name )
{
  bool ok = true;
  JsonWriteScopeObject json ( parent_scope, name );
  json.WriteUInt ( m_health, "health" );
  ok = ok && m_weapon.WriteJson ( &json, "weapon" );
  ok = ok && m_powerup.WriteJson ( &json, "powerup" );
  json.WriteString ( m_name, "name" );
  ok = ok && m_position.WriteJson ( &json, "position" );
  return ok;
}
