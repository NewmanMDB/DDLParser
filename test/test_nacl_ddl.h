
//=====================================================================
// Do not edit. This file generated by ddlt/ddlt on 22 April 2012 09:02
//=====================================================================
#include <stdio.h>
#include <stdint.h>
#include <string.h>
#include "JsonWriteScope.h"

//================================================================================
// Select Weapon
//================================================================================

class Weapon // Weapons available to the player
{
  private:
    uint32_t m_Value;

  public:
    enum
    {

      kFist = 0x5a513adaUL, // Bare hands

      kChainsaw = 0x4f3bf077UL, // A la Chainsaw Massacre

      kPistol = 0xce3515ebUL, // Simple pistol

      kShotgun = 0x57ab09a1UL, // A single-barrel shotgun

      kChaingun = 0x1ed1844eUL, // A machine gun

      kRocketLauncher = 0x7ea174f1UL, // Portable rocket launcher

      kPlasmaGun = 0x64287f97UL, // Plasma gun

      kBFG9000 = 0x5b45e13eUL, // *The* BFG 9000

    };

    inline bool Init()
    {
      m_Value = kPistol;
      return true;
    }

    inline void Destroy() {}

    inline uint32_t Get() const
    {
      return m_Value;
    }

    void        Set ( uint32_t value );
    const char* GetName ( uint32_t value );
    bool        WriteJson ( JsonWriteScope* parent_scope, const char* name = NULL );
};

//================================================================================
// Bitfield Powerup
//================================================================================

class Powerup // Powerup pickups
{
  private:
    uint32_t m_Value;

  public:
    enum
    {

      kNone = 0x00000000UL, // Help me!

      kRadiationSuit = 0x00000001UL, // Makes the player immune to radiation for a limited time

      kPartialInvisibility = 0x00000002UL, // Makes the player almost invisible to enemies for a limited time

      kInvulnerability = 0x00000004UL, // Makes the player invulnerable for a limited time

      kComputerMap = 0x00000008UL, // Gives the complete map of the level to the player

      kLightVisor = 0x00000010UL, // Allows the player to see in the dark for a limited time

      kBerserk = 0x00000020UL, // Gives the player the ability to quickly kill enemies with his fists

      kAll = kRadiationSuit | kPartialInvisibility | kInvulnerability | kComputerMap | kLightVisor | kBerserk, //

    };

    inline bool Init()
    {
      m_Value = kNone;
      return true;
    }

    inline void Destroy() {}

    inline uint32_t Get() const
    {
      return m_Value;
    }

    inline void Set ( uint32_t value )
    {
      m_Value = value;
    }

    inline void Add ( uint32_t value )
    {
      m_Value |= value;
    }

    inline void Remove ( uint32_t value )
    {
      m_Value &= ~value;
    }

    bool WriteJson ( JsonWriteScope* parent_scope, const char* name = NULL );
};

//================================================================================
// Struct Position
//================================================================================

class Position //
{
  private:

    float m_x; //

    float m_y; //

    float m_angle; // The direction the player is looking at ( degrees )


  public:
    bool Init();
    bool WriteJson ( char*& output, size_t& size, const char* name = NULL );
    bool WriteJson ( JsonWriteScope* parent_scope, const char* name = NULL );


    inline float Getx() const
    {
      return m_x;
    }

    inline void Setx ( float value )
    {
      m_x = value;
    }

    inline float Gety() const
    {
      return m_y;
    }

    inline void Sety ( float value )
    {
      m_y = value;
    }

    inline float Getangle() const
    {
      return m_angle;
    }

    inline void Setangle ( float value )
    {
      m_angle = value;
    }

};

//================================================================================
// Struct Mariner
//================================================================================

class Mariner // The player character
{
  private:

    uint32_t m_health; // The player's health

    Weapon m_weapon; // The player's current weapon

    Powerup m_powerup; // The player's powerups

    char m_name[ 256 ]; // The player's name for multiplayer sessions

    Position m_position; // The player's position


  public:
    bool Init();
    bool WriteJson ( char*& output, size_t& size, const char* name = NULL );
    bool WriteJson ( JsonWriteScope* parent_scope, const char* name = NULL );


    inline uint32_t Gethealth() const
    {
      return m_health;
    }

    inline void Sethealth ( uint32_t value )
    {
      m_health = value;
    }

    inline Weapon* Getweapon()
    {
      return &m_weapon;
    }

    inline Powerup* Getpowerup()
    {
      return &m_powerup;
    }

    inline const char* Getname() const
    {
      return m_name;
    }

    inline void Setname ( const char* value )
    {
      strncpy ( m_name, value, sizeof ( m_name ) );
    }

    inline Position* Getposition()
    {
      return &m_position;
    }

};
